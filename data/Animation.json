{"query-continue":{"search":{"gsroffset":1},"revisions":{"rvstartid":136741}},"query":{"pages":{"4381":{"pageid":4381,"ns":0,"title":"Animation","revisions":[{"*":"<div class=\"infobox\" style=\"width: 2in\">[[File:Rcode-button-task-crushed.png|64px|left|alt=Task|link=Category:Solutions by Programming Task]]'''Animation'''<br\/>\nYou are encouraged to [[Rosetta Code:Solve a Task|solve this task]] according to the task description, using any language you may know.[[Category:Programming Tasks]][[Category:Temporal media]]<\/div>[[Category:GUI]]Animation is the foundation of a great many parts of graphical user interfaces, including both the fancy effects when things change used in window managers, and of course games. The core of any animation system is a scheme for periodically changing the display while still remaining responsive to the user. This task demonstrates this.\n\nCreate a window containing the string \"<code>Hello World! <\/code>\" (the trailing space is significant). Make the text appear to be rotating right by periodically removing one letter from the end of the string and attaching it to the front. When the user clicks on the text, it should reverse its direction.\n\n==[[:Category:ActionScript|ActionScript]][[Category:ActionScript]]==\n<lang ActionScript>\/\/create the text box\nvar textBox:TextField = new TextField();\naddChild(textBox);\n\nvar text = \"Hello, World! \";\nvar goingRight = true;\n\n\/\/modify the string and update it in the text box\nfunction animate(e:Event)\n{\n\tif(goingRight)\n\t\ttext = text.slice(text.length-1,text.length) + text.slice(0, text.length - 1);\n\telse\n\t\ttext = text.slice(1) + text.slice(0,1);\n\ttextBox.text = text;\n}\n\n\/\/event handler to perform the animation\ntextBox.addEventListener(Event.ENTER_FRAME, animate);\n\/\/event handler to register clicks\ntextBox.addEventListener(MouseEvent.MOUSE_DOWN, function(){goingRight = !goingRight;});\n<\/lang>\n\n==[[:Category:Ada|Ada]][[Category:Ada]]==\n<div class=\"examplemeta workswith\">'''Works with''': [[SMW::off]][[GNAT]][[SMW::on]]<\/div>\n<div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:GtkAda|GtkAda]][[Category:GtkAda]][[SMW::on]]<\/div>\n\nanimation.adb:\n<lang Ada>with Gtk.Main;\nwith Gtk.Handlers;\nwith Gtk.Label;\nwith Gtk.Button;\nwith Gtk.Window;\nwith Glib.Main;\n\nprocedure Animation is\n   Scroll_Forwards : Boolean := True;\n\n   package Button_Callbacks is new Gtk.Handlers.Callback\n     (Gtk.Button.Gtk_Button_Record);\n\n   package Label_Timeout is new Glib.Main.Generic_Sources\n     (Gtk.Label.Gtk_Label);\n\n   package Window_Callbacks is new Gtk.Handlers.Return_Callback\n     (Gtk.Window.Gtk_Window_Record, Boolean);\n\n   --  Callback for click event\n   procedure On_Button_Click\n     (Object : access Gtk.Button.Gtk_Button_Record'Class);\n\n   --  Callback for delete event\n   function On_Main_Window_Delete\n     (Object : access Gtk.Window.Gtk_Window_Record'Class)\n      return   Boolean;\n\n   function Scroll_Text (Data : Gtk.Label.Gtk_Label) return Boolean;\n\n   procedure On_Button_Click\n     (Object : access Gtk.Button.Gtk_Button_Record'Class)\n   is\n      pragma Unreferenced (Object);\n   begin\n      Scroll_Forwards := not Scroll_Forwards;\n   end On_Button_Click;\n\n   function On_Main_Window_Delete\n     (Object : access Gtk.Window.Gtk_Window_Record'Class)\n      return   Boolean\n   is\n      pragma Unreferenced (Object);\n   begin\n      Gtk.Main.Main_Quit;\n      return True;\n   end On_Main_Window_Delete;\n\n   function Scroll_Text (Data : Gtk.Label.Gtk_Label) return Boolean is\n      Text : constant String := Gtk.Label.Get_Text (Data);\n   begin\n      if Scroll_Forwards then\n         Gtk.Label.Set_Text\n           (Label => Data,\n            Str   => Text (Text'First + 1 .. Text'Last) & Text (Text'First));\n      else\n         Gtk.Label.Set_Text\n           (Label => Data,\n            Str   => Text (Text'Last) & Text (Text'First .. Text'Last - 1));\n      end if;\n      return True;\n   end Scroll_Text;\n\n   Main_Window     : Gtk.Window.Gtk_Window;\n   Text_Button     : Gtk.Button.Gtk_Button;\n   Scrolling_Text  : Gtk.Label.Gtk_Label;\n   Timeout_ID      : Glib.Main.G_Source_Id;\n   pragma Unreferenced (Timeout_ID);\n\nbegin\n   Gtk.Main.Init;\n   Gtk.Window.Gtk_New (Window => Main_Window);\n   Gtk.Label.Gtk_New (Label => Scrolling_Text, Str => \"Hello World! \");\n   Gtk.Button.Gtk_New (Button => Text_Button);\n   Gtk.Button.Add (Container => Text_Button, Widget => Scrolling_Text);\n   Button_Callbacks.Connect\n     (Widget => Text_Button,\n      Name   => \"clicked\",\n      Marsh  => Button_Callbacks.To_Marshaller (On_Button_Click'Access));\n   Timeout_ID :=\n     Label_Timeout.Timeout_Add\n       (Interval => 125,\n        Func     => Scroll_Text'Access,\n        Data     => Scrolling_Text);\n   Gtk.Window.Add (Container => Main_Window, Widget => Text_Button);\n   Window_Callbacks.Connect\n     (Widget => Main_Window,\n      Name   => \"delete_event\",\n      Marsh  => Window_Callbacks.To_Marshaller (On_Main_Window_Delete'Access));\n   Gtk.Window.Show_All (Widget => Main_Window);\n   Gtk.Main.Main;\nend Animation;<\/lang>\n\n==[[:Category:AutoHotkey|AutoHotkey]][[Category:AutoHotkey]]==\n<lang AutoHotkey>SetTimer, Animate ; Timer runs every 250 ms.\nString := \"Hello World \"\nGui, Add, Text, vS gRev, %String%\nGui, +AlwaysOnTop -SysMenu\nGui, Show\nReturn\n\nAnimate:\n\tString := (!Reverse) ? (SubStr(String, 0) . Substr(String, 1, StrLen(String)-1)) : (SubStr(String, 2) . SubStr(String, 1, 1))\n\tGuiControl,,S, %String%\nreturn\n\nRev: ; Runs whenever user clicks on the text control\n\tReverse := !Reverse\nreturn<\/lang>\n\n==[[:Category:BBC BASIC|BBC BASIC]][[Category:BBC BASIC]]==\n<div class=\"examplemeta workswith\">'''Works with''': [[SMW::off]][[BBC BASIC for Windows]][[SMW::on]]<\/div>\n<lang bbcbasic>      VDU 23,22,212;40;16,32,16,128\n      txt$ = \"Hello World! \"\n      direction% = TRUE\n      ON MOUSE direction% = NOT direction% : RETURN\n      OFF\n      REPEAT\n        CLS\n        PRINT txt$;\n        IF direction% THEN\n          txt$ = RIGHT$(txt$) + LEFT$(txt$)\n        ELSE\n          txt$ = MID$(txt$,2) + LEFT$(txt$,1)\n        ENDIF\n        WAIT 20\n      UNTIL FALSE<\/lang>\n\n==[[:Category:C|C]][[Category:C]]==\n<div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:GTK|GTK]][[Category:GTK]][[SMW::on]]<\/div>\n(NB: implicitly, through GTK, it uses also Pango library)\n<lang c>#include <stdlib.h>\n#include <string.h>\n#include <gtk\/gtk.h>\n\nconst gchar *hello = \"Hello World! \";\ngint direction = -1;\ngint cx=0;\ngint slen=0;\n\nGtkLabel *label;\n\nvoid change_dir(GtkLayout *o, gpointer d)\n{\n  direction = -direction;\n}\n\ngchar *rotateby(const gchar *t, gint q, gint l)\n{\n  gint i, cl = l, j;\n  gchar *r = malloc(l+1);\n  for(i=q, j=0; cl > 0; cl--, i = (i + 1)%l, j++)\n    r[j] = t[i];\n  r[l] = 0;\n  return r;\n}\n\ngboolean scroll_it(gpointer data)\n{\n  if ( direction > 0 )\n    cx = (cx + 1) % slen;\n  else\n    cx = (cx + slen - 1 ) % slen;\n  gchar *scrolled = rotateby(hello, cx, slen);\n  gtk_label_set_text(label, scrolled);\n  free(scrolled);\n  return TRUE;\n}\n\n\nint main(int argc, char **argv)\n{\n  GtkWidget *win;\n  GtkButton *button;\n  PangoFontDescription *pd;\n\n  gtk_init(&argc, &argv);\n  win = gtk_window_new(GTK_WINDOW_TOPLEVEL);\n  gtk_window_set_title(GTK_WINDOW(win), \"Basic Animation\");\n  g_signal_connect(G_OBJECT(win), \"delete-event\", gtk_main_quit, NULL);\n\n  label = (GtkLabel *)gtk_label_new(hello);\n\n  \/\/ since we shift a whole character per time, it's better to use\n  \/\/ a monospace font, so that the shifting seems done at the same pace\n  pd = pango_font_description_new();\n  pango_font_description_set_family(pd, \"monospace\");\n  gtk_widget_modify_font(GTK_WIDGET(label), pd);\n\n  button = (GtkButton *)gtk_button_new();\n  gtk_container_add(GTK_CONTAINER(button), GTK_WIDGET(label));\n\n  gtk_container_add(GTK_CONTAINER(win), GTK_WIDGET(button));\n  g_signal_connect(G_OBJECT(button), \"clicked\", G_CALLBACK(change_dir), NULL);\n\n  slen = strlen(hello);\n\n  g_timeout_add(125, scroll_it, NULL);\n  \n  gtk_widget_show_all(GTK_WIDGET(win));\n  gtk_main();\n  return 0;\n}<\/lang>\n\n==<span id=\"C sharp\">[[:Category:C sharp|C#]]<\/span>[[Category:C sharp]]==\n\n<lang csharp>using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace BasicAnimation\n{\n  class BasicAnimationForm : Form\n  {\n    bool isReverseDirection;\n    Label textLabel;\n    Timer timer;\n\n    internal BasicAnimationForm()\n    {\n      this.Size = new Size(150, 75);\n      this.Text = \"Basic Animation\";\n\n      textLabel = new Label();\n      textLabel.Text = \"Hello World! \";\n      textLabel.Location = new Point(3,3);\n      textLabel.AutoSize = true;\n      textLabel.Click += new EventHandler(textLabel_OnClick);\n      this.Controls.Add(textLabel);\n\n      timer = new Timer();\n      timer.Interval = 500;\n      timer.Tick += new EventHandler(timer_OnTick);\n      timer.Enabled = true;\n\n      isReverseDirection = false;\n    }\n\n    private void timer_OnTick(object sender, EventArgs e)\n    {\n      string oldText = textLabel.Text, newText;\n      if(isReverseDirection)\n        newText = oldText.Substring(1, oldText.Length - 1) + oldText.Substring(0, 1);\n      else\n        newText = oldText.Substring(oldText.Length - 1, 1) + oldText.Substring(0, oldText.Length - 1);\n      textLabel.Text = newText;\n    }\n\n    private void textLabel_OnClick(object sender, EventArgs e)\n    {\n      isReverseDirection = !isReverseDirection;\n    }\n  }\n\n   class Program\n   {\n      static void Main()\n      {\n\tApplication.Run(new BasicAnimationForm());\n      }\n   }\n}<\/lang>\n\n==[[:Category:Clojure|Clojure]][[Category:Clojure]]==\nClojure is a JVM language so this example uses Swing, and illustrates Clojure's platform integration.\n<lang clojure>(import '[javax.swing JFrame JLabel])\n(import '[java.awt.event MouseAdapter])\n\n(def text \"Hello World! \")\n(def text-ct (count text))\n(def rotations\n  (vec\n    (take text-ct\n      (map #(apply str %)\n        (partition text-ct 1 (cycle text))))))\n\n(def pos (atom 0))  ;position in rotations vector being displayed\n(def dir (atom 1))  ;direction of next position (-1 or 1)\n\n(def label (JLabel. text))\n\n(.addMouseListener label\n  (proxy [MouseAdapter] []\n    (mouseClicked [evt] (swap! dir -))))\n\n(defn animator []\n  (while true\n    (Thread\/sleep 100)\n    (swap! pos #(-> % (+ @dir) (mod text-ct)))\n    (.setText label (rotations @pos))))\n\n(doto (JFrame.)\n  (.add label)\n  (.pack)\n  (.setDefaultCloseOperation JFrame\/EXIT_ON_CLOSE)\n  (.setVisible true))\n  \n(future-call animator)  ;simple way to run animator on a separate thread<\/lang>\n\n==[[:Category:Common Lisp|Common Lisp]][[Category:Common Lisp]]==\nThe ltk package provides a lisp interface to Tk for creating graphical interfaces. Assuming ''ltk'' has been installed somewhere the following will work as per the Tcl example.\n<div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:Tk|Tk]][[Category:Tk]][[SMW::on]]<\/div>\n<lang lisp>(use-package :ltk)\n \n(defparameter *message* \"Hello World! \")\n(defparameter *direction* :left)\n(defun animate (label)\n  (let* ((n (length *message*))\n         (i (if (eq *direction* :left) 0 (1- n)))\n         (c (char *message* i)))\n    (if (eq *direction* :left)\n        (setq *message* (concatenate 'string\n\t\t\t\t     (subseq *message* 1 n) \n\t\t\t\t     (list c)))\n\t(setq *message* (concatenate 'string (list c) \n\t\t\t\t     (subseq *message* 0 (1- n)))))\n    (setf (ltk:text label) *message*)\n    (ltk:after 125 (lambda () (animate label)))))\n \n(defun basic-animation ()\n  (ltk:with-ltk ()\n      (let* ((label (make-instance 'label \n                                   :font \"Courier 14\")))\n        (setf (text label) *message*)\n        (ltk:bind label \"<Button-1>\"\n                  (lambda (event)\n                    (declare (ignore event))\n                    (cond\n                     ((eq *direction* :left) (setq *direction* :right))\n                     ((eq *direction* :right) (setq *direction* :left)))))\n        (ltk:pack label)\n        (animate label)\n        (ltk:mainloop))))\n \n(basic-animation)<\/lang>\n\n==[[:Category:D|D]][[Category:D]]==\n<div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:QD|QD]][[Category:QD]][[SMW::on]]<\/div>\nuses <div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:SDL|SDL]][[Category:SDL]][[SMW::on]]<\/div>\n<div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:SDL_ttf|SDL_ttf]][[Category:SDL_ttf]][[SMW::on]]<\/div>\n<div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:tools|tools]][[Category:tools]][[SMW::on]]<\/div>\n<lang d>module test26;\n\nimport qd, SDL_ttf, tools.time;\n\nvoid main() {\n  screen(320, 200);\n  auto last = sec();\n  string text = \"Hello World! \";\n  auto speed = 0.2;\n  int dir = true;\n  while (true) {\n    cls;\n    print(10, 10, Bottom|Right, text);\n    if (sec() - last > speed) {\n      last = sec();\n      if (dir == 0) text = text[$-1] ~ text[0 .. $-1];\n      else text = text[1 .. $] ~ text[0];\n    }\n    flip; events;\n    if (mouse.clicked\n      && mouse.pos in display.select(10, 10, 100, 20)\n    ) dir = !dir;\n  }\n}<\/lang>\n\n==[[:Category:E|E]][[Category:E]]==\n\n<div class=\"examplemeta workswith\">'''Works with''': [[SMW::off]][[E-on-Java]][[SMW::on]]<\/div> (Java Swing; tested on Mac OS X 10.5.7)\n\n<lang e># State\nvar text := \"Hello World! \"\nvar leftward := false\n\n# Window\ndef w := <swing:makeJFrame>(\"RC: Basic Animation\")\n\n# Text in window\nw.setContentPane(def l := <swing:makeJLabel>(text))\nl.setOpaque(true) # repaints badly if not set!\nl.addMouseListener(def mouseListener {\n    to mouseClicked(_) {\n        leftward := !leftward\n    }\n    match _ {}\n})\n\n# Animation\ndef anim := timer.every(100, fn _ { # milliseconds\n    def s := text.size()\n    l.setText(text := if (leftward) {\n        text(1, s) + text(0, 1)\n    } else {\n        text(s - 1, s) + text(0, s - 1)\n    })\n})\n\n# Set up window shape and close behavior\nw.pack()\nw.setLocationRelativeTo(null)\nw.addWindowListener(def windowListener { \n    to windowClosing(_) { anim.stop() } \n    match _ {}\n})\n\n# Start everything\nw.show()\nanim.start()<\/lang>\n\nText-only version (no Java dependency; no clicking, use reverse() and stop() to control):\n\n<lang e>def [reverse, stop] := {\n    var text := \"Hello World! \"\n    var leftward := false\n\n    def anim := timer.every(100, fn _ { # milliseconds\n        def s := text.size()\n        text := if (leftward) {\n            text(1, s) + text(0, 1)\n        } else {\n            text(s - 1, s) + text(0, s - 1)\n        }\n        print(\"\\b\" * s, text)\n    })\n    print(\"\\n\", text)\n    anim.start()\n    [def _() { leftward := !leftward; null }, anim.stop]\n}<\/lang>\n\n==<span id=\"F Sharp\">[[:Category:F Sharp|F#]]<\/span>[[Category:F Sharp]]==\n<div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:Windows Presentation Foundation|Windows Presentation Foundation]][[Category:Windows Presentation Foundation]][[SMW::on]]<\/div>\n<lang fsharp>open System.Windows\n\nlet str = \"Hello world! \"\nlet mutable i = 0\nlet mutable d = 1\n\n[<System.STAThread>]\ndo\n  let button = Controls.Button()\n  button.Click.Add(fun _ -> d <- str.Length - d)\n  let update _ =\n    i <- (i + d) % str.Length\n    button.Content <- str.[i..] + str.[..i-1]\n  Media.CompositionTarget.Rendering.Add update\n  (Application()).Run(Window(Content=button)) |> ignore<\/lang>\n\n==[[:Category:Factor|Factor]][[Category:Factor]]==\n<lang Factor>USING: accessors alarms calendar kernel models sequences ui\nui.gadgets ui.gadgets.labels ui.gestures ;\nFROM: models => change-model ;\nIN: rosetta.animation\n\nCONSTANT: sentence \"Hello World! \"\n\nTUPLE: animated-label < label-control reversed alarm ;\n: <animated-label> ( model -- <animated-model> )\n    sentence animated-label new-label swap >>model \n    monospace-font >>font ;\n: update-string ( str reverse -- str )\n    [ unclip-last prefix ] [ unclip suffix ] if ;\n: update-model ( model reversed? -- )\n    [ update-string ] curry change-model ;\n\nanimated-label  \n    H{ \n        { T{ button-down } [ [ not ] change-reversed drop ] }\n     } set-gestures\n\nM: animated-label graft*\n  [ [ [ model>> ] [ reversed>> ] bi update-model ] curry 400 milliseconds every ] keep\n  (>>alarm) ;\nM: animated-label ungraft*\n    alarm>> cancel-alarm ;\n: main ( -- )\n   [ sentence <model> <animated-label> \"Rosetta\" open-window ] with-ui ;\n\nMAIN: main<\/lang>\n\n==[[:Category:Fantom|Fantom]][[Category:Fantom]]==\n\n<lang fantom>\nusing concurrent\nusing fwt\nusing gfx\n\nconst class RotateString : Actor\n{\n  new make (Label label) : super (ActorPool ())\n  {\n    Actor.locals[\"rotate-label\"] = label\n    Actor.locals[\"rotate-string\"] = label.text\n    Actor.locals[\"direction\"] = \"forward\"\n    sendLater (1sec, \"update\")\n  }\n\n  \/\/ responsible for calling appropriate methods to process each message\n  override Obj? receive (Obj? msg)\n  {\n    switch (msg)\n    {\n      case \"update\":\n        Desktop.callAsync |->| { update }  \/\/ make sure we update GUI in event thread\n        sendLater (1sec, \"update\")\n      case \"reverse\":\n        Desktop.callAsync |->| { reverse }\n    }\n    \n    return null\n  }\n\n  \/\/ change the stored string indicating the direction to rotate\n  Void reverse ()\n  {\n    Actor.locals[\"direction\"] = \n        (Actor.locals[\"direction\"] == \"forward\" ? \"backward\" : \"forward\")\n  }\n\n  \/\/ update the text on the label according to the stored direction\n  Void update ()\n  {\n    label := Actor.locals[\"rotate-label\"] as Label\n    str := Actor.locals[\"rotate-string\"] as Str\n    if (label != null)\n    {\n      newStr := \"\"\n      if (Actor.locals[\"direction\"] == \"forward\")\n        newStr = str[1..-1] + str[0].toChar\n      else\n        newStr = str[-1].toChar + str[0..<-1]\n      label.text = newStr\n      Actor.locals[\"rotate-string\"] = newStr\n    }\n  }\n}\n\nclass Animate\n{\n  public static Void main ()\n  {\n    label := Label \n    { \n      text = \"Hello world! \" \n      halign = Halign.center\n    }\n    ticker := RotateString (label)\n    label.onMouseDown.add |Event e|\n    {\n      ticker.send (\"reverse\")\n    }\n    Window\n    {\n      title = \"Animate\"\n      label,\n    }.open\n  }\n}\n<\/lang>\n\n==[[:Category:Haskell|Haskell]][[Category:Haskell]]==\nUsing simple graphics <div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:HGL|HGL]][[Category:HGL]][[SMW::on]]<\/div> from [http:\/\/hackage.haskell.org\/packages\/hackage.html HackageDB]\n<lang haskell>import Graphics.HGL.Units (Time, Point, Size, )\nimport Graphics.HGL.Draw.Monad (Graphic, )\nimport Graphics.HGL.Draw.Text\nimport Graphics.HGL.Draw.Font\nimport Graphics.HGL.Window\nimport Graphics.HGL.Run\nimport Graphics.HGL.Utils\n\nimport Control.Exception (bracket, )\n\nrunAnim = runGraphics $\n bracket\n  (openWindowEx \"Basic animation task\" Nothing (250,50) DoubleBuffered (Just 110))\n  closeWindow\n  (\\w -> do\n    f <- createFont (64,28) 0 False False \"courier\" \n    let loop t dir = do\n\t  e <- maybeGetWindowEvent w\n\t  let d = case e of\n\t\t  Just (Button _ True False)  -> -dir\n\t\t  _ -> dir\n\t      t' = if d == 1 then last t : init t else tail t ++ [head t]\n\t  setGraphic w (withFont f $ text (5,10) t') >> getWindowTick w \n\t  loop  t' d\n\t      \n    loop \"Hello world ! \" 1  )<\/lang>\nRun within interpreter GHCi:\n<lang haskell>*Main> runAnim<\/lang>\n\n==[[:Category:HicEst|HicEst]][[Category:HicEst]]==\n<lang hicest>CHARACTER string=\"Hello World! \"\n\n   WINDOW(WINdowhandle=wh, Height=1, X=1, TItle=\"left\/right click to rotate left\/right, Y-click-position sets milliseconds period\")\n   AXIS(WINdowhandle=wh, PoinT=20, X=2048, Y, Title='ms', MiN=0, MaX=400, MouSeY=msec, MouSeCall=Mouse_callback, MouSeButton=button_type)\n   direction = 4\n   msec = 100    ! initial milliseconds\n   DO tic = 1, 1E20\n      WRITE(WIN=wh, Align='Center Vertical') string\n      IF(direction == 4) string = string(LEN(string)) \/\/ string ! rotate left\n      IF(direction == 8) string = string(2:) \/\/ string(1)       ! rotate right\n      WRITE(StatusBar, Name) tic, direction, msec\n      SYSTEM(WAIT=msec)\n   ENDDO\n END\n\nSUBROUTINE Mouse_callback()\n   direction = button_type ! 4 == left button up, 8 == right button up\n END <\/lang>\n\n==Icon and [[:Category:Unicon|Unicon]][[Category:Unicon]]==\nThe following code uses features exclusive to Unicon.\n\n<lang Unicon>import gui\n$include \"guih.icn\"\n\nclass WindowApp : Dialog (label, direction)\n\n  method rotate_left (msg)\n    return msg[2:0] || msg[1]\n  end\n\n  method rotate_right (msg)\n    return msg[-1:0] || msg[1:-1]\n  end\n\n  method reverse_direction ()\n    direction := 1-direction\n  end\n\n  # this method gets called by the ticker, and updates the label\n  method tick ()\n    static msg := \"Hello World! \"\n    if direction = 0 \n      then msg := rotate_left (msg)\n      else msg := rotate_right (msg)\n    label.set_label(msg)\n  end\n\n  method component_setup ()\n    direction := 1 # start off rotating to the right\n    label := Label(\"label=Hello World! \", \"pos=0,0\")\n    # respond to a mouse click on the label\n    label.connect (self, \"reverse_direction\", MOUSE_RELEASE_EVENT)\n    add (label)\n\n    connect (self, \"dispose\", CLOSE_BUTTON_EVENT)\n    # tick every 100ms\n    self.set_ticker (100)\n  end\nend\n\n# create and show the window\nprocedure main ()\n  w := WindowApp ()\n  w.show_modal ()\nend\n<\/lang>\n\n==[[:Category:J|J]][[Category:J]]==\n<lang j>coinsert'jgl2' [ require'gl2'   \n\nMESSAGE          =:  'Hello World! '\nTIMER_INTERVAL   =:  0.5 * 1000                                            NB.  Milliseconds\nDIRECTION        =:  -1                                                    NB.  Initial direction is right -->\n\nANIM             =:  noun define\n  pc anim nomax nosize;pn \"Basic Animation in J\";\n  xywh 1 1 174 24;cc isi isigraph rightmove bottommove;\n  pas 0 0;pcenter;pshow;\n)\n\nanim_run         =:  verb def ' wd ANIM,''; timer '',\":TIMER_INTERVAL '\nsys_timer_z_     =:  verb def ' isiMsg MESSAGE=:  DIRECTION |. MESSAGE '   NB.  Rotate MESSAGE according to DIRECTION\nanim_isi_mbldown =:  verb def ' DIRECTION=:  - DIRECTION '                 NB.  Reverse direction when user clicks\nanim_close       =:  verb def ' wd ''timer 0; pclose; reset;'' '           NB.  Shut down timer\n\nisiMsg           =:  verb define\n  wd'psel anim'\n  glclear ''                                                               NB.  Clear out old drawing\n  glfont '\"courier new\" 36'\n  gltext y\n  glpaint ''                                                               NB.  Copy to screen\n)\n\nanim_run ''<\/lang>\n\n==[[:Category:Java|Java]][[Category:Java]]==\n<div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:Swing|Swing]][[Category:Swing]][[SMW::on]]<\/div>\n<lang java>import java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\n\npublic class Rotate extends JFrame {\n  String text = \"Hello World! \";\n  JLabel label = new JLabel(text);\n  boolean rotRight = true;\n  int startIdx = 0;\n\n  public Rotate() {\n    label.addMouseListener(new MouseAdapter() {\n      @Override\n      public void mouseClicked(MouseEvent evt) {\n        rotRight = !rotRight;\n      }\n    });\n    add(label);\n    pack();\n    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    setVisible(true);\n  }\n\n  public static void main(String[] args) {\n    final Rotate rot = new Rotate();\n    TimerTask task = new TimerTask() {\n      public void run() {\n        if (rot.rotRight) {\n          rot.startIdx++;\n          if (rot.startIdx >= rot.text.length()) {\n            rot.startIdx -= rot.text.length();\n          }\n        } else {\n          rot.startIdx--;\n          if (rot.startIdx < 0) {\n            rot.startIdx += rot.text.length();\n          }\n        }\n        rot.label.setText(getRotatedText(rot.text, rot.startIdx));\n      }\n    };\n    Timer timer = new Timer(false);\n    timer.schedule(task, 0, 500);\n  }\n\n  public static String getRotatedText(String text, int startIdx) {\n    String ret = \"\";\n    int i = startIdx;\n    do {\n      ret += text.charAt(i) + \"\";\n      i++;\n      i = i % text.length();\n    } while (i != startIdx);\n    return ret;\n  }\n}<\/lang>\n\n==[[:Category:JavaScript|JavaScript]][[Category:JavaScript]] + [[:Category:HTML|HTML]][[Category:HTML]]==\n<lang javascript><html> <head>\n    <title>RC: Basic Animation<\/title>\n    <script type=\"text\/javascript\">\n        function animate(id) {\n            var element = document.getElementById(id);\n            var textNode = element.childNodes[0]; \/\/ assuming no other children\n\n            var text = textNode.data;\n            var reverse = false;\n            \n            element.onclick = function () { reverse = !reverse; };\n            \n            setInterval(function () {\n                if (reverse)\n                    text = text.substring(1) + text[0];\n                else\n                    text = text[text.length - 1] + text.substring(0, text.length - 1);\n                textNode.data = text;\n            }, 100);\n        }\n    <\/script>\n<\/head> <body onload=\"animate('target')\">\n    <pre id=\"target\">Hello World! <\/pre>\n<\/body> <\/html><\/lang>\n\n==[[:Category:JavaScript|JavaScript]][[Category:JavaScript]] + [[:Category:SVG|SVG]][[Category:SVG]]==\n<lang javascript><svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n     width=\"100\" height=\"40\">\n    <script type=\"text\/javascript\">\n        function animate(element) {\n            var textNode = element.childNodes[0]; \/\/ assuming no other children\n            var text = textNode.data;\n            var reverse = false;\n\n            element.onclick = function () { reverse = !reverse; };\n            \n            setInterval(function () {\n                if (reverse)\n                    text = text.substring(1) + text[0];\n                else\n                    text = text[text.length - 1] + text.substring(0, text.length - 1);\n                textNode.data = text;\n            }, 100);\n        }\n    <\/script>\n  \n    <rect width=\"100\" height=\"40\" fill=\"yellow\"\/>\n    <text x=\"2\" y=\"20\" onload=\"animate(this);\">Hello World! <\/text>\n<\/svg><\/lang>\n\n==[[:Category:LabVIEW|LabVIEW]][[Category:LabVIEW]]==\nThis image is a [http:\/\/zone.ni.com\/devzone\/cda\/tut\/p\/id\/9330 VI Snippet], an executable image of [[LabVIEW]] code. The LabVIEW version is shown on the top-right hand corner. You can download it, then drag-and-drop it onto the LabVIEW block diagram from a file browser, and it will appear as runnable, editable code.<br\/>\n[[File:LabVIEW Animation.png]]\n==[[:Category:Liberty BASIC|Liberty BASIC]][[Category:Liberty BASIC]]==\n<lang lb>    txt$ = \"Hello World! \"\n    txtLength = len(txt$)\n    direction=1\n\n    NoMainWin\n\n    open \"Rosetta Task: Animation\" for graphics_nsb as #demo\n    #demo \"Trapclose [quit]\"\n    #demo \"down\"\n    #demo \"Font Verdana 20 Bold\"\n    #demo \"When leftButtonUp [changedirection]\"\n\n    timer 150 , [draw]\n    wait\n\n[draw]\n    if direction then\n        txt$ = right$(txt$, 1);left$(txt$, txtLength - 1)\n    else\n        txt$ = right$(txt$, txtLength - 1);left$(txt$, 1)\n    end if\n    #demo \"discard\"\n    #demo \"place 50 100\"\n    #demo \"\\\";txt$\n    wait\n\n[changedirection]\n    direction = not(direction)\n    wait\n\n[quit]\n    timer 0\n    close #demo\n    end<\/lang>\n\n==[[:Category:Logo|Logo]][[Category:Logo]]==\n<div class=\"examplemeta workswith\">'''Works with''': [[SMW::off]][[UCB Logo]][[SMW::on]]<\/div>\n<lang logo>to rotate.left :thing\n  output lput first :thing butfirst :thing\nend\nto rotate.right :thing\n  output fput last :thing butlast :thing\nend\n\nmake \"text \"|Hello World! |\nmake \"right? \"true\n\nto step.animation\n  label :text\t\t\t; graphical\n  ; type char 13  type :text\t; textual\n  wait 6\t\t\t; 1\/10 second\n  if button <> 0 [make \"right? not :right?]\n  make \"text ifelse :right? [rotate.right :text] [rotate.left :text]\nend\n\nhideturtle\nuntil [key?] [step.animation]<\/lang>\n\n==[[:Category:Mathematica|Mathematica]][[Category:Mathematica]]==\n<lang Mathematica>mystring = \"Hello World! \";\nScroll[str_, dir_] := StringJoin @@ RotateLeft[str \/\/ Characters, dir];\nGiveString[dir_] := (mystring = Scroll[mystring, dir]);\nCreateDialog[{\n   DynamicModule[{direction = -1}, \n    EventHandler[\n     Dynamic[TextCell[\n       Refresh[GiveString[direction], UpdateInterval -> 1\/8]], \n      TrackedSymbols -> {}], {\"MouseClicked\" :> (direction *= -1)}]]\n   }];<\/lang>\n\n==[[:Category:Oz|Oz]][[Category:Oz]]==\n<lang oz>functor\nimport\n   Application\n   QTk at 'x-oz:\/\/system\/wp\/QTk.ozf'\ndefine\n   proc {Start}\n      Label\n      Window = {CreateWindow ?Label}\n      Animation = {New LabelAnimation init(Label delay:125)}\n   in\n      {Window show}\n      {Animation go}\n   end\n   \n   fun {CreateWindow ?Label}\n      Courier = {QTk.newFont font(family:courier size:14)}\n      GUI = td(\n               title:\"Basic Animation\"\n               label(text:\"Hello World! \" handle:Label font:Courier)\n               action:proc {$} {Application.exit 0} end\n               )\n   in\n      {QTk.build GUI}\n   end\n\n   class LabelAnimation from Time.repeat\n      attr\n         activeShifter:ShiftRight\n         otherShifter:ShiftLeft\n      feat\n         label\n         \n      meth init(Label delay:Delay<=100)\n         self.label = Label\n         {self setRepAll(action:Animate delay:Delay)}\n         {Label bind(event:\"<Button-1>\" action:self#Revert)}\n      end\n\n      meth Animate\n         OldText = {self.label get(text:$)}\n         NewText = {@activeShifter OldText}\n      in\n         {self.label set(text:NewText)}\n      end\n\n      meth Revert\n         otherShifter := (activeShifter := @otherShifter)\n      end\n   end\n\n   fun {ShiftRight Xs}\n      {List.last Xs}|{List.take Xs {Length Xs}-1}\n   end\n   \n   fun {ShiftLeft Xs}\n      {Append Xs.2 [Xs.1]}\n   end\n   \n   {Start}\nend<\/lang>\n\n==[[:Category:Perl|Perl]][[Category:Perl]]==\n<div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:XUL::Gui|XUL::Gui]][[Category:XUL::Gui]][[SMW::on]]<\/div>\n<lang Perl>use XUL::Gui;\n\nmy $dir = '(.+)(.)';\ninterval {\n    ID(lbl)->value =~ s\/$dir\/$2$1\/;\n} 75;\n\ndisplay Label\n    id    => 'lbl',\n    value => \"Hello World! \",\n    onclick => sub {toggle $dir => '(.+)(.)', '(.)(.+)'};<\/lang>\n\n==[[:Category:PicoLisp|PicoLisp]][[Category:PicoLisp]]==\n===Plain text===\nA plain text version. The following script works in an XTerm window.\n<lang PicoLisp>#!\/usr\/bin\/picolisp \/usr\/lib\/picolisp\/lib.l\n\n(prin \"^[[?9h\")  # Mouse reporting on\n\n(setq Dir 1  Text (chop \"Hello World! \"))\n\n(loop\n   (prin (do Dir (rot Text)))\n   (when (= \"^[\" (key 200))\n      (key) (key)\n      (when (= \" \" (key))  # Left button\n         (setq Dir (if (= 1 Dir) 12 1)) )\n      (key) (key) )\n   (do (length Text) (prin \"^H\")) )<\/lang>\n===HTML\/JavaScript===\nThe standard PicoLisp GUI is HTTP based. Connect your browser to\nhttp:\/\/localhost:8080 after starting the following script.\n\nThe scrolling text is displayed in a button. Clicking on the button\nreverses the scroll direction.\n<lang PicoLisp>#!\/usr\/bin\/picolisp \/usr\/lib\/picolisp\/lib.l\n\n(load \"@ext.l\" \"@lib\/http.l\" \"@lib\/xhtml.l\" \"@lib\/form.l\")\n\n(one *Dir)\n\n(de start ()\n   (app)\n   (action\n      (html 0 \"Animation\" \"@lib.css\" NIL\n         (form NIL\n            (gui '(+Button)\n               '(pack (do *Dir (rot '`(chop \"Hello World! \"))))\n               '(setq *Dir (if (= 1 *Dir) 12 1)) )\n            (gui '(+Click +Auto +Button) 400 'This 1000 \"Start\") ) ) ) )\n\n(server 8080 \"!start\")\n(wait)<\/lang>\n\n===Java\/Swing===\nThis solution works on ErsatzLisp, the Java version of PicoLisp.\n<lang PicoLisp>#!ersatz\/pil\n\n(setq\n   Dir 1\n   Text (chop \"Hello World! \")\n   Frame (java \"javax.swing.JFrame\" T \"Animation\")\n   Label (java \"javax.swing.JLabel\" T (pack Text)) )\n\n(java Label 'addMouseListener\n   (interface \"java.awt.event.MouseListener\"\n      'mouseClicked '((Ev) (setq Dir (if (= 1 Dir) 12 1)))\n      'mouseEntered nil\n      'mouseExited nil\n      'mousePressed nil\n      'mouseReleased nil ) )\n\n(java Frame 'add Label)\n(java Frame 'pack)\n(java Frame 'setVisible T)\n(loop\n   (wait 200)\n   (java Label 'setText (pack (do Dir (rot Text)))) )<\/lang>\n\n==[[:Category:Prolog|Prolog]][[Category:Prolog]]==\nSWI-Prolog has a grapghic interface XPCE.\n<lang Prolog>:- use_module(library(pce)).\n\nanimation :-\n    new(D, window('Animation')),\n    new(Label, label(hello, 'Hello world ! ')),\n    send(D, display, Label, point(1,10)),\n    new(@animation, animation(Label)),\n    send(D, recogniser,\n         new(_G, my_click_gesture(left, ''))),\n\n    send(D, done_message, and(message(@animation, free),\n                  message(@receiver, destroy))),\n    send(D, open),\n    send(@animation?mytimer, start).\n\n\n:- pce_begin_class(animation(label), object).\nvariable(label, object,  both, \"Display window\").\nvariable(delta,    object, both,  \"increment of the angle\").\nvariable(mytimer, timer, both, \"timer of the animation\").\n\ninitialise(P, W:object) :->\n        \"Creation of the object\"::\n        send(P, label, W),\n        send(P, delta, to_left),\n    send(P, mytimer, new(_, timer(0.5,message(P, anim_message)))).\n\n% method called when the object is destroyed\n% first the timer is stopped\n% then all the resources are freed\nunlink(P) :->\n    send(P?mytimer, stop),\n    send(P, send_super, unlink).\n\n\n% message processed by the timer\nanim_message(P) :->\n    get(P, label, L),\n    get(L, selection, S),\n    get(P, delta, Delta),\n    compute(Delta, S, S1),\n    new(A, name(S1)),\n    send(L, selection, A).\n\n\n:- pce_end_class.\n\n:- pce_begin_class(my_click_gesture, click_gesture,\n           \"Click in a window\").\n\nclass_variable(button, button_name, left,\n           \"By default click with left button\").\n\nterminate(G, Ev:event) :->\n    send(G, send_super, terminate, Ev),\n    get(@animation, delta, D),\n    (   D = to_left -> D1 = to_right; D1 = to_left),\n    send(@animation, delta, D1).\n\n:- pce_end_class.\n\n\n% compute next text to be dispalyed\ncompute(to_right, S, S1) :-\n    get(S, size, Len),\n    Len1 is Len - 1,\n    get(S, sub, Len1, Str),\n    get(S, delete_suffix, Str, V),\n    get(Str, append, V, S1).\n\ncompute(to_left, S, S1) :-\n    get(S, sub, 0, 1, Str),\n    get(S, delete_prefix, Str, V),\n    get(V, append, Str, S1).\n<\/lang>\n==[[:Category:PureBasic|PureBasic]][[Category:PureBasic]]==\n<lang PureBasic>OpenWindow(0,0,0,500,100,\"Hello World!\",#PB_Window_ScreenCentered|#PB_Window_SystemMenu)\n\ntext$ = \"Hello World! \"\ndirection = 1\n\nLoadFont(0,\"\",60)\nButtonGadget(0,2,2,496,96,text$) : SetGadgetFont(0,FontID(0))\n\nRepeat\n  event = WaitWindowEvent(50)\n  Select event\n    Case #PB_Event_Gadget\n      If EventGadget() = 0\n        direction*-1\n      EndIf\n    Case #PB_Event_CloseWindow\n      End\n  EndSelect\n  \n  If ElapsedMilliseconds()-tick > 400\n    offset+direction\n    If offset > Len(text$)-1\n      offset = 0\n    ElseIf offset < 0\n      offset = Len(text$)-1\n    EndIf\n    SetGadgetText(0,Mid(text$,offset+1)+Left(text$,offset))\n    tick = ElapsedMilliseconds()\n  EndIf\nForEver<\/lang>\n\n==[[:Category:Python|Python]][[Category:Python]]==\n===Using pygame===\n<div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:pygame|pygame]][[Category:pygame]][[SMW::on]]<\/div>\n<lang python>import pygame, sys\nfrom pygame.locals import *\npygame.init()\n\nYSIZE = 40\nXSIZE = 150\n\nTEXT = \"Hello World! \"\nFONTSIZE = 32\n\nLEFT = False\nRIGHT = True\n\nDIR = RIGHT\n\nTIMETICK = 180\nTICK = USEREVENT + 2\n\nTEXTBOX = pygame.Rect(10,10,XSIZE,YSIZE)\n\npygame.time.set_timer(TICK, TIMETICK)\n\nwindow = pygame.display.set_mode((XSIZE, YSIZE))\npygame.display.set_caption(\"Animation\")\n\nfont = pygame.font.SysFont(None, FONTSIZE)\nscreen = pygame.display.get_surface()\n\ndef rotate():\n    index = DIR and -1 or 1\n    global TEXT\n    TEXT = TEXT[index:]+TEXT[:index]\n\ndef click(position):\n    if TEXTBOX.collidepoint(position):\n        global DIR\n        DIR = not DIR\n\ndef draw():\n    surface = font.render(TEXT, True, (255,255,255), (0,0,0))\n    global TEXTBOX\n    TEXTBOX = screen.blit(surface, TEXTBOX)\n    \ndef input(event):\n    if event.type == QUIT:\n        sys.exit(0)\n    elif event.type == MOUSEBUTTONDOWN:\n        click(event.pos)\n    elif event.type == TICK:\n        draw()\n        rotate()\n\nwhile True:\n    input(pygame.event.wait())\n    pygame.display.flip()<\/lang>\n===Using Tkinter===\n<lang python>import Tkinter as tki\n\ndef scroll_text(s, how_many):\n    return s[how_many:] + s[:how_many]\n\ndirection = 1\ntk = tki.Tk()\nvar = tki.Variable(tk)\n\ndef mouse_handler(point):\n    global direction\n    direction *= -1\n\ndef timer_handler():\n    var.set(scroll_text(var.get(),direction))\n    tk.after(125, timer_handler)\n\nvar.set('Hello, World! ')\ntki.Label(tk, textvariable=var).pack()\ntk.bind(\"<Button-1>\", mouse_handler)\ntk.after(125, timer_handler)\ntk.title('Python Animation')\ntki.mainloop()\n<\/lang>\n\n==[[:Category:R|R]][[Category:R]]==\n<div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:gWidgets|gWidgets]][[Category:gWidgets]][[SMW::on]]<\/div>\n\nThe basic principle is:create a window with a label in it, then add a handler to the label for rotating the string, and another for changing direction on a click.  Use of the tag function allows you to store the text flow direction as an attribute of the label.\n<lang r>\nrotate_string <- function(x, forwards) \n{ \n\u00a0 \u00a0nchx <- nchar(x) \n\u00a0 \u00a0if(forwards) \n\u00a0 \u00a0{ \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n\u00a0 \u00a0 \u00a0 paste(substr(x, nchx, nchx), substr(x, 1, nchx - 1), sep = \"\") \n\u00a0 \u00a0} else \n\u00a0 \u00a0{ \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n\u00a0 \u00a0 \u00a0 paste(substr(x, 2, nchx), substr(x, 1, 1), sep = \"\") \n\u00a0 \u00a0} \n}\n\nhandle_rotate_label <- function(obj, interval = 100)\n{\n\u00a0 addHandlerIdle(obj,\n\u00a0\u00a0\u00a0 handler = function(h, ...)\n\u00a0\u00a0\u00a0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 svalue(obj) <- rotate_string(svalue(obj), tag(obj, \"forwards\"))\n\u00a0\u00a0\u00a0 },\n\u00a0\u00a0\u00a0 interval = interval\n\u00a0 )\n}\n\nhandle_change_direction_on_click <- function(obj)\n{\n\u00a0 addHandlerClicked(obj,\n\u00a0\u00a0\u00a0 handler = function(h, ...)\n\u00a0\u00a0\u00a0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0 tag(h$obj, \"forwards\") <- !tag(h$obj, \"forwards\")\n\u00a0\u00a0\u00a0 }\n\u00a0 )\n}\n\nlibrary(gWidgets)\nlibrary(gWidgetstcltk) #or library(gWidgetsRGtk2)\u00a0or library(gWidgetsrJava)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \nlab <- glabel(\"Hello World! \", container = gwindow()) \u00a0\ntag(lab, \"forwards\") <- TRUE \nhandle_rotate_label(lab) \nhandle_change_direction_on_click(lab) \n<\/lang>\n\n==[[:Category:REBOL|REBOL]][[Category:REBOL]]==\n<lang REBOL>REBOL [\n\tTitle: \"Basic Animation\"\n\tAuthor: oofoe\n\tDate: 2009-12-06\n\tURL: http:\/\/rosettacode.org\/wiki\/Basic_Animation\n]\n\nmessage: \"Hello World! \"  how: 1\n\nroll: func [\n\t\"Shifts a text string right or left by one character.\"\n\ttext [string!] \"Text to shift.\"\n\tdirection [integer!] \"Direction to shift -- right: 1, left: -1.\"\n\t\/local h t\n][\n\teither direction > 0 [\n\t\th: last text  t: copy\/part text ((length? text) - 1)\n\t][\n\t\th: copy skip text 1  t: text\/1\n\t]\n\trejoin [h t]\n]\n\n; This next bit specifies the GUI panel. The window will have a\n; gradient backdrop, over which will be composited the text, in a\n; monospaced font with a drop-shadow. A timer (the 'rate' bit) is set\n; to update 24 times per second. The 'engage' function in the 'feel'\n; block listens for events on the text face. Time events update the\n; animation and mouse-down change the animation's direction.\n\nview layout [\n\tbackdrop effect [gradient 0x1 coal black]\n\n\tvh1 as-is message ; 'as-is' prevents text trimming.\n\tfont [name: font-fixed]  \n\trate 24  \n\tfeel [\n\t\tengage: func [f a e] [\n\t\t\tcase [\n\t\t\t\t'time = a [set-face f message: roll message how] ; Animate.\n\t\t\t\t'down = a [how: how * -1] ; Change direction.\n\t\t\t]\n\t\t]\n\t]\n]<\/lang>\n\n==[[:Category:Ruby|Ruby]][[Category:Ruby]]==\n<div class=\"examplemeta translation\">'''Translation of''': [[Animation#Tcl|Tcl]]<\/div>\n<div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:Ruby\/Tk|Ruby\/Tk]][[Category:Ruby\/Tk]][[SMW::on]]<\/div>\n<lang ruby>require 'tk'\n$str = TkVariable.new(\"Hello World! \")\n$dir = :right\n \ndef animate\n  $str.value = shift_char($str.value, $dir)\n  $root.after(125) {animate}\nend\n\ndef shift_char(str, dir)\n  case dir\n  when :right then str[-1,1] + str[0..-2]\n  when :left  then str[1..-1] + str[0,1]\n  end\nend\n \n$root = TkRoot.new(\"title\" => \"Basic Animation\")\n \nTkLabel.new($root) do\n  textvariable $str\n  font \"Courier 14\"\n  pack {side 'top'}\n  bind(\"ButtonPress-1\") {$dir = {:right=>:left,:left=>:right}[$dir]}\nend\n \nanimate\nTk.mainloop<\/lang>\n\n<div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:Shoes|Shoes]][[Category:Shoes]][[SMW::on]]<\/div>\n<lang ruby>Shoes.app do\n  @direction = 1\n  @label = para \"Hello World! \", :family => 'monospace'\n\n  click {|button, left, top| @direction *= -1 if button == 1}\n\n  animate(8) do |f| \n    t = @label.text\n    @label.text = @direction > 0 ? t[-1] + t[0..-2] : t[1..-1] + t[0]\n  end\nend<\/lang>\n\n==[[:Category:Scala|Scala]][[Category:Scala]]==\n<div class=\"examplemeta workswith\">'''Works with''': [[SMW::off]][[Scala]] version 2.8[[SMW::on]]<\/div>\n<lang scala>import scala.actors.Actor.{actor, loop, reactWithin, exit}\nimport scala.actors.TIMEOUT\nimport scala.swing.{SimpleSwingApplication, MainFrame, Label}\nimport scala.swing.event.MouseClicked\n\ncase object Revert\n\nobject BasicAnimation extends SimpleSwingApplication {\n  val label = new Label(\"Hello World! \")\n  val rotator = actor {\n    var goingRight = true\n    loop {\n      reactWithin(250 \/*ms*\/) {\n        case Revert => goingRight = !goingRight\n        case TIMEOUT =>\n          if (goingRight)\n            label.text = label.text.last + label.text.init\n          else\n            label.text = label.text.tail + label.text.head\n        case unknown => println(\"Unknown message \"+unknown); exit()\n      }\n    }\n  }\n  def top = new MainFrame {\n    title = \"Basic Animation\"\n    contents = label\n  }\n  listenTo(label.mouse.clicks) \/\/ use \"Mouse\" instead of \"mouse\" on Scala 2.7\n  reactions += {\n    case _ : MouseClicked => rotator ! Revert\n  }\n}<\/lang>\n\n==[[:Category:Suneido|Suneido]][[Category:Suneido]]==\n<lang Suneido>Window(Controller\n    {\n    Xmin: 50\n    Ymin: 50\n    New()\n        {\n        super(.layout())\n        .txt = .FindControl('text')\n        .moveTimer = SetTimer(NULL, 0, 600, .moveTimerFunc)\n        }\n    direction: -1\n    moveTimer: false\n    layout()\n        {\n        return #(Vert (Static 'Hello World! ', size: 12, weight: 600,\n            notify:, name: 'text'))\n        }\n    moveTimerFunc(@unused)\n        {\n        str = .txt.Get()\n        .txt.Set(str.Substr(1 * .direction) $ str.Substr(0, (1 * .direction)))\n        }\n    Static_Click()\n        {\n        .direction = .direction * -1\n        }\n    Destroy()\n        {\n        if .moveTimer isnt false\n            {\n            KillTimer(NULL, .moveTimer)\n            ClearCallback(.moveTimerFunc)\n            }\n        super.Destroy()\n        }\n    })<\/lang>\n\n==[[:Category:SVG|SVG]][[Category:SVG]] (no scripts)==\n\n<div class=\"examplemeta workswith\">'''Works with''': [[SMW::off]][[Batik]] version 1.7[[SMW::on]]<\/div>\n\nThis animation is defined as a smooth movement rather than by moving whole characters, because that is more natural in SVG (without scripting); by characters would require 13 different text elements displayed in sequence.\n\n<lang xml><svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"100\" height=\"30\">\n    <g id=\"all\">\n        <rect width=\"100%\" height=\"100%\" fill=\"yellow\"\/>\n        <g style=\"font: 18 'Times New Roman', serif; \n                  fill: black;\n                  stroke: white; stroke-width: 0.001; \/* workaround for Batik oddity *\/ \">\n            <text x=\"0\" y=\"20\" textLength=\"95\">Hello World!<\/text>\n            <text x=\"-100\" y=\"20\" textLength=\"95\">Hello World!<\/text>\n            <animateMotion restart=\"whenNotActive\" repeatCount=\"indefinite\" dur=\"2s\"\n                           begin=\"0s;all.click\" end=\"all.click\"\n                           from=\"0,0\"   by=\"100,0\"\/>\n            <animateMotion restart=\"whenNotActive\" repeatCount=\"indefinite\" dur=\"2s\"\n                           begin=\"all.click\" end=\"all.click\"\n                           from=\"100,0\" by=\"-100,0\"\/>\n        <\/g>\n    <\/g>\n<\/svg><\/lang>\n\n(Does not work in Safari 4.0.2 because it apparently does not implement toggled animations correctly ([http:\/\/www.w3.org\/TR\/2001\/REC-smil-animation-20010904\/#RestartAttribute see spec]). Dreadful workaround: set the two animations to <code>id=\"a\" begin=\"0s;all.click\" end=\"all.mousedown\"<\/code> and <code>begin=\"a.end\" end=\"all.click\"<\/code>, respectively.)\n\n==[[:Category:Tcl|Tcl]][[Category:Tcl]]==\n<div class=\"examplemeta libheader\">'''Library:''' [[SMW::off]][[:Category:Tk|Tk]][[Category:Tk]][[SMW::on]]<\/div>\n<lang tcl>package require Tk\nset s \"Hello World! \"\nset dir 0\n# Periodic animation callback\nproc animate {} {\n    global dir s\n    if {$dir} {\n        set s [string range $s 1 end][string index $s 0]\n    } else {\n        set s [string index $s end][string range $s 0 end-1]\n    }\n    # We will run this code ~8 times a second (== 125ms delay)\n    after 125 animate\n}\n# Make the label (constant width font looks better)\npack [label .l -textvariable s -font {Courier 14}]\n# Make a mouse click reverse the direction\nbind .l <Button-1> {set dir [expr {!$dir}]}\n# Start the animation\nanimate<\/lang>\n\n==[[:Category:TI-89 BASIC|TI-89 BASIC]][[Category:TI-89 BASIC]]==\n\nThe requirements contain \"When the user clicks on the text\u2026\". The TI-89 does not have a graphical cursor, so just for the sake of overdoing it, and to have a little more complex animation (overlapping objects), this program implements one. Use the arrow keys and ENTER to control the cursor.\n\n<pre style=\"font-family:'TI Uni'\">rcanimat()\nPrgm\n  Local leftward,s,i,k,x,y\n\n  false \u2192 leftward\n  \"Hello World! \" \u2192 s\n  0 \u2192 k      \u00a9 last keypress found\n  6*3 \u2192 x    \u00a9 cursor position\n  5 \u2192 y\n\n  ClrIO\n  While k \u2260 4360 and k \u2260 277 and k \u2260 264  \u00a9 QUIT,HOME,ESC keys\n\n    \u00a9 Handle Enter key\n    If k = 13 Then\n      If x \u2265 40 and x < 40+6*dim(s) and y \u2265 25 and y < 35 Then \u00a9 On text?\n        not leftward \u2192 leftward\n      ElseIf x \u2265 5 and x < 5+6*dim(\"[Quit]\") and y \u2265 55 and y < 65 Then \u00a9 On quit?\n        Exit\n      EndIf\n    EndIf\n\n    \u00a9 Cursor movement keys\n    If k=338 or k=340 or k=344 or k=337 or k=339 or k=342 or k=345 or k=348 Then\n      Output y, x, \" \" \u00a9 Blank old cursor pos\n      If     k = 338 or k = 339 or k = 342 Then: y-6\u2192y\n      ElseIf k = 344 or k = 345 or k = 348 Then: y+6\u2192y :EndIf\n      If     k = 337 or k = 339 or k = 345 Then: x-6\u2192x\n      ElseIf k = 340 or k = 342 or k = 348 Then: x+6\u2192x :EndIf\n      min(max(y, 0), 64)\u2192y\n      min(max(x, 0), 152)\u2192x\n    EndIf\n\n    \u00a9 Drawing\n    Output 0, 0, \"Use arrows, ENTER key\"\n    Output 60, 5, \"[Quit]\"\n    Output 30, 40, s\n    Output y, x, \"\u0174\"              \u00a9 should be diamond symbol\n\n    \u00a9 Animation\n    If leftward Then\n      right(s, dim(s)-1) & left(s, 1) \u2192 s\n    Else\n      right(s, 1) & left(s, dim(s)-1) \u2192 s\n    EndIf\n\n    0 \u2192 i\n    getKey() \u2192 k                  \u00a9 reads most recent keypress or 0\n    While i < 2 and k = 0         \u00a9 Delay loop. Better solution?\n      getKey() \u2192 k\n      i + 1 \u2192 i\n    EndWhile\n\n  EndWhile\n  DispHome\nEndPrgm<\/pre>\n\n==[[:Category:Visual Basic|Visual Basic]][[Category:Visual Basic]]==\n\nThis example shows code that is hidden by the IDE. (Form creation is done graphically within the IDE, not at runtime.)\n\n<lang vb>VERSION 5.00\nBegin VB.Form Form1\n   Begin VB.Timer Timer1\n      Interval = 250\n   End\n   Begin VB.Label Label1\n      AutoSize = -1  'True\n      Caption  = \"Hello World! \"\n   End\nEnd\nAttribute VB_Name = \"Form1\"\nAttribute VB_GlobalNameSpace = False\nAttribute VB_Creatable = False\nAttribute VB_PredeclaredId = True\nAttribute VB_Exposed = False\n'Everything above this line is hidden when in the IDE.\n\nPrivate goRight As Boolean\n\nPrivate Sub Label1_Click()\n    goRight = Not goRight\nEnd Sub\n\nPrivate Sub Timer1_Timer()\n    If goRight Then\n        x = Mid(Label1.Caption, 2) & Left(Label1.Caption, 1)\n    Else\n        x = Right(Label1.Caption, 1) & Left(Label1.Caption, Len(Label1.Caption) - 1)\n    End If\n    Label1.Caption = x\nEnd Sub<\/lang>\n\n==[[:Category:XPL0|XPL0]][[Category:XPL0]]==\n<lang XPL0>include c:\\cxpl\\codes;\nint     CpuReg, Dir, I, J;\nchar    Str;\nstring  0;                      \\use zero-terminated strings, instead of MSb set\n[CpuReg:= GetReg;               \\provides access to 8086 CPU registers\n\\      0123456789012\nStr:= \"Hello World! \";\nClear;\nDir:= -1;                       \\make string initially scroll to the right\nI:= 0;                          \\index to start of displayed portion of string\nrepeat  Cursor(0, 0);           \\set cursor position to upper-left corner\n        for J:= 0 to 12 do\n                [ChOut(0, Str(I));  I:= I+1;  if I>12 then I:= 0];\n        Sound(0, 2, 1);         \\delay about 1\/9 second\n        I:= I+Dir;              \\step starting position of displayed string\n        if I<0 then I:=12;      \\wraparound\n        if I>12 then I:= 0;\n        CpuReg:= GetReg;        \\get mouse button press information\n        CpuReg(0):= 5;  CpuReg(1):= 0;\n        SoftInt($33);           \\reverse direction if left button was pressed\n        if CpuReg(1) then Dir:= -Dir;\nuntil   KeyHit;                 \\any keystroke terminates program\n]<\/lang>\n\n[[Category:ACL2\/Omit]]\n[[Category:GUISS\/Omit]]\n[[Category:ML\/I\/Omit]]\n[[Category:PARI\/GP\/Omit]]\n[[Category:PHP\/Omit]]\n[[Category:AWK\/Omit]]\n\n[[Category:Animation]]"}]}}}}