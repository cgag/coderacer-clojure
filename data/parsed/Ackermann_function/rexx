/*REXX program calculates/shows some values for the Ackermann function. */

                     /*Note: the Ackermann function (as implemented) is */
                     /*      higly recursive and is limited by the      */
                     /*      biggest number that can have "1" added to  */
                     /*      a number (successfully, accurately).       */

numeric digits 100        /*have REXX to use up to  100  digit integers.*/

                          /*When REXX raises a number to a power  (via  */
                          /*  the   **  operator), the power must be an */
                          /*  integer  (positive,  zero,  or negative). */

       do j=0 to 4        /*Ackermann(5,1) is a bit impractical to calc.*/
       say                /*display a blank (separator) line.           */
             do k=0 to 15
             call Ackermann_tell j,k
             if j==4 & k==2 then leave    /*no sense in going overboard.*/
             end   /*k*/
       end         /*j*/
exit
/*────────────────────────────────────ACKERMANN_TELL subroutine (echo). */
ackermann_tell: parse arg mm,nn               /*display an echo message.*/
say '─── Ackermann('mm","right(nn,2)')='ackermann(mm,nn)
return
/*────────────────────────────────────ACKERMANN subroutine (recusive).  */
ackermann: procedure                    /*compute the Ackerman function.*/
parse arg m,n
if m==0 then return n+1
if m==1 then return n+2
if m==2 then return n+n+3
if m==3 then return 2**(n+3)-3
if m==4 then do;  a=2;         do  (n+3) - 1       /*ugh, heavy lifting.*/
                               a=2**a
                               end
             return a-3
             end
if n==0 then return ackermann(m-1,1)
             return ackermann(m-1,ackermann(m,n-1))