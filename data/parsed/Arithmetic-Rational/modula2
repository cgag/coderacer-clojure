MODULE TestRat;
       FROM InOut IMPORT WriteString, WriteLine;
       FROM Terminal IMPORT KeyPressed;
       FROM Strings IMPORT CompareStr;
       FROM Rational IMPORT RAT, IGCD, RCreate, RToString, RIsZero, RNormalize,
                            RToRational, REQ, RNE, RLT, RLE, RGT, RGE, WriteRational,
                            RAdd, RSubtract, RMultiply, RDivide, RAbs, RNeg, RInv;
VAR
    res : INTEGER;
    a, b, c, d, e, f : RAT;
    ans : ARRAY [1..100] OF CHAR;

PROCEDURE Assert( F : BOOLEAN; S : ARRAY OF CHAR );
BEGIN
    IF ( NOT F) THEN
        WriteLine( S );
    END;
END Assert;

BEGIN

    a := RCreate( 0, 0 );
    Assert( RIsZero( a ), "RIsZero( a )");

    a := RToRational("2");
    RToString( a, ans );
    res := CompareStr( ans, "2" );
    Assert( (res = 0), "CompareStr( RToString( a ), '2' ) = 0");

    a := RToRational("1/2");
    RToString( a, ans );
    res := CompareStr( ans, "1/2");
    Assert( res = 0, "CompareStr( RToString( a, ans ), '1/2') = 0");

    b := RToRational( "2/-12" );
    RToString( b, ans );
    res := CompareStr( ans, "-1/6");
    Assert( res = 0, "CompareStr( RToString( b, ans ), '-1/6') = 0");

    f := RCreate( 0, 9 ); (* rationalizes internally to zero *)

    a := RToRational("1/3");
    b := RToRational("1/2");
    c := RCreate( 1, 3 );

    Assert( NOT REQ( a, b ), "1/3 == 1/2" );
    Assert( REQ( a, c ), "1/3 == 1/3" );
    Assert( RNE( a, b ), "1/3 != 1/2" );
    Assert( RLT( a, b ), "1/3 < 1/2" );
    Assert( NOT RLT(b,a), "1/2 < 1/3" );
    Assert( NOT RLT(a,c), "1/3 < 1/3" );
    Assert( NOT RGT(a,b), "1/3 > 1/2" );
    Assert( RGT(b,a), "1/2 > 1/3" );
    Assert( NOT RGT(a,c), "1/3 > 1/3" );

    Assert( RLE( a, b ), "1/3 <= 1/2" );
    Assert( NOT RLE( b, a ), "1/2 <= 1/3" );
    Assert( RLE( a, c ), "1/3 <= 1/3" );
    Assert( NOT RGE(a,b), "1/3 >= 1/2" );
    Assert( RGE(b,a), "1/2 >= 1/3" );
    Assert( RGE( a,c ), "1/3 >= 1/3" );

    a := RCreate(1,2);
    b := RCreate(1,6);
    a := RAdd( a, b );
    Assert( REQ( a, RToRational("2/3")), "1/2 + 1/6 == 2/3" );

    c := RNeg( a );
    Assert( REQ( a, RCreate( 2,3)), "2/3 == 2/3" );
    Assert( REQ( c, RCreate( 2,-3)), "Neg 1/2 == -1/2" );
    a := RCreate( 2,-3);

    d := RAbs( c );
    Assert( REQ( d, RCreate( 2,3 ) ), "abs(neg(1/2))==1/2" );

    a := RToRational( "1/2");
    b := RSubtract( b, a );

    Assert( REQ( b, RCreate(-1,3) ), "1/6 - 1/2 == -1/3" );

    c := RInv(b);
    RToString( c, ans );
    res := CompareStr( ans, "-3" );
    Assert( res = 0, "inv(1/6 - 1/2) == -3" );

    f := RInv( f ); (* as f normalized to zero, the reciprocal is still zero *)


    b := RCreate( 1, 6);
    b := RAdd( b, RAdd( RCreate( 2,3), RCreate( 4,2 )));
    RToString( b, ans );
    res := CompareStr( ans, "17/6" );
    Assert( res = 0, "1/6 + 2/3 + 4/2 = 17/6" );

    a := RCreate(1,3);
    b := RCreate(1,6);
    c := RCreate(5,6);
    d := RToRational("1/5");
    e := RToRational("2");
    f := RToRational("0/9");

    Assert( REQ( RMultiply( c, d ), b ), "5/6 * 1/5 = 1/6" );
    Assert( REQ( RMultiply( c, RMultiply( d, e ) ), a ), "5/6 * 1/5 * 2 = 1/3" );
    Assert( REQ( RMultiply( c, RMultiply( d, RMultiply( e, f ) ) ), f ), "5/6 * 1/5 * 2 * 0" );
    Assert( REQ( b, RDivide( c, RToRational("5" ) ) ), "5/6 / 5 = 1/6" );

    e := RDivide( c, f ); (* RDivide multiplies so no divide by zero *)

    WriteString("Press any key..."); WHILE NOT KeyPressed() DO END;
END TestRat.